addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

const dailyLimit = 100000; // Giới hạn hàng ngày cố định
const sendTimes = ['Gửi Ngay', '19:00', '20:00', '22:00']; // Thời gian gửi trong ngày (giờ phút)

async function handleRequest(request) {
  try {
    if (request.method === 'POST') {
      const formData = await request.formData();

      if (formData.get('action') === 'query' || formData.get('action') === 'send_telegram') {
        const date = new Date();
        const startDate = date.toISOString().split('T')[0] + 'T00:00:00.000Z';
        const endDate = date.toISOString().split('.')[0] + '.000Z';

        const filter = {
          datetime_geq: startDate,
          datetime_leq: endDate,
        };

        const overviewFilter = {
          datetime_geq: startDate,
          datetime_leq: endDate,
        };

        const durableObjectFilter = {
          datetimeHour_geq: startDate,
          datetimeHour_leq: endDate,
        };

        const query = `
          query getBillingMetrics($accountTag: String!, $filter: AccountWorkersInvocationsAdaptiveFilter_InputObject, $overviewFilter: AccountWorkersInvocationsAdaptiveFilter_InputObject) {
            viewer {
              accounts(filter: {accountTag: $accountTag}) {
                workersInvocationsAdaptive(limit: 10000, filter: $filter) {
                  sum {
                    duration
                    requests
                    subrequests
                    responseBodySize
                    errors
                  }
                  quantiles {
                    cpuTimeP50
                  }
                  dimensions {
                    usageModel
                  }
                }
                workersOverviewRequestsAdaptiveGroups(limit: 1000, filter: $overviewFilter) {
                  sum {
                    cpuTimeUs
                  }
                  dimensions {
                    usageModel
                  }
                }
                durableObjectsInvocationsAdaptiveGroups(limit: 10000, filter: $durableObjectFilter) {
                  sum {
                    requests
                  }
                }
                durableObjectsPeriodicGroups(limit: 10000, filter: $durableObjectFilter) {
                  sum {
                    activeTime
                  }
                }
              }
            }
          }`;

        const response = await fetch('https://api.cloudflare.com/client/v4/graphql', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Auth-Email': API_EMAIL,
            'X-Auth-Key': API_KEY,
          },
          body: JSON.stringify({
            query: query,
            variables: {
              accountTag: ACCOUNT_ID,
              filter: filter,
              overviewFilter: overviewFilter,
              durableObjectFilter: durableObjectFilter,
            },
          }),
        });

        const data = await response.json();

        if (data.errors) {
          throw new Error(data.errors[0].message);
        }

        const requests = data.data.viewer.accounts[0].workersInvocationsAdaptive[0].sum.requests || 0;
        const usagePercentage = (requests / dailyLimit) * 100;

        const formattedDate = new Intl.DateTimeFormat('vi-VN', {
          timeZone: 'Asia/Ho_Chi_Minh',
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
        }).format(date);

        if (formData.get('action') === 'query') {
          return new Response(renderForm({ date, requests, dailyLimit, usagePercentage }), {
            headers: { 'Content-Type': 'text/html' },
          });
        } else if (formData.get('action') === 'send_telegram') {
          const sendTime = formData.get('sendTime');

          const message = `Dữ liệu truy vấn lúc: ${formattedDate}\nSố lượng truy vấn: ${requests} / ${dailyLimit}\nPhần trăm sử dụng: ${usagePercentage.toFixed(2)}%`;

          if (sendTime === 'Gửi Ngay') {
            const telegramResponse = await sendTelegramMessage(BOT_TOKEN, CHAT_ID, message);
            if (!telegramResponse.ok) {
              throw new Error('Failed to send Telegram message.');
            }
            return new Response(renderForm({ telegramStatus: 'Message sent successfully!', requests, dailyLimit, usagePercentage }), {
              headers: { 'Content-Type': 'text/html' },
            });
          } else {
            // Handle scheduling logic here if needed
            return new Response(renderForm({ telegramStatus: `Message scheduled to send at ${sendTime}`, requests, dailyLimit, usagePercentage }), {
              headers: { 'Content-Type': 'text/html' },
            });
          }
        }
      }
    }

    return new Response(renderForm(), {
      headers: { 'Content-Type': 'text/html' },
    });
  } catch (error) {
    return new Response(`Error: ${error.message}`, { status: 500 });
  }
}

function renderForm(data = {}) {
  const { date, requests, dailyLimit, usagePercentage, telegramStatus } = data;
  const formattedDate = date
    ? new Intl.DateTimeFormat('vi-VN', {
        timeZone: 'Asia/Ho_Chi_Minh',
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      }).format(date)
    : '';
  const formattedRequests = requests !== undefined ? requests : '';
  const formattedDailyLimit = dailyLimit !== undefined ? dailyLimit : '';
  const formattedUsagePercentage = usagePercentage !== undefined && !isNaN(usagePercentage) ? usagePercentage.toFixed(2) : '';

  const sendTimeOptions = sendTimes.map(time => `<option value="${time}">${time}</option>`).join('');

  function obfuscate(value) {
    if (value.length <= 4) return value;
    return value.slice(0, 2) + '...' + value.slice(-2);
  }

  return `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Cloudflare API Usage</title>
        <link href="https://stackpath.bootstrapcdn.com/bootswatch/4.5.2/minty/bootstrap.min.css" rel="stylesheet">
        <style>
            .form-section {
                margin-bottom: 30px;
                padding: 20px;
                border: 1px solid #dedede;
                border-radius: 5px;
                background-color: #f9f9f9;
            }

            .form-section h2 {
                margin-bottom: 20px;
            }

            .form-group {
                margin-bottom: 15px;
            }

            .usage-details {
                margin-top: 20px;
            }
        </style>
    </head>
    <body>
        <div class="container mt-5">
            <h1 class="text-center">Cloudflare API Usage</h1>
            
            <form method="POST">
                <div class="form-section">
                    <h2>Truy Vấn</h2>
                    <div class="form-group">
                        <label for="apiEmail">API Email</label>
                        <input type="email" class="form-control" id="apiEmail" name="apiEmail" value="${obfuscate(API_EMAIL)}" readonly>
                    </div>
                    <div class="form-group">
                        <label for="apiKey">API Key</label>
                        <input type="text" class="form-control" id="apiKey" name="apiKey" value="${obfuscate(API_KEY)}" readonly>
                    </div>
                    <div class="form-group">
                        <label for="accountId">Account ID</label>
                        <input type="text" class="form-control" id="accountId" name="accountId" value="${obfuscate(ACCOUNT_ID)}" readonly>
                    </div>
                    <input type="hidden" name="action" value="query">
                    <button type="submit" class="btn btn-primary" name="query">Truy Vấn</button>
                </div>
            </form>

            ${formattedDate && formattedRequests && formattedDailyLimit
              ? `
                <div class="mt-4 usage-details">
                    <strong>Dữ liệu truy vấn lúc:</strong> ${formattedDate}<br>
                    <strong>Số lượng truy vấn:</strong> ${formattedRequests} / ${formattedDailyLimit}<br>
                    <strong>Phần trăm sử dụng:</strong> ${formattedUsagePercentage}%
                </div>
              `
              : ''
            }

            <form method="POST">
                <div class="form-section">
                    <h2>Send Telegram</h2>
                    <div class="form-group">
                        <label for="botToken">Bot Token</label>
                        <input type="text" class="form-control" id="botToken" name="botToken" value="${obfuscate(BOT_TOKEN)}" readonly>
                    </div>
                    <div class="form-group">
                        <label for="chatId">Chat ID</label>
                        <input type="text" class="form-control" id="chatId" name="chatId" value="${obfuscate(CHAT_ID)}" readonly>
                    </div>
                    <div class="form-group">
                        <label for="sendTime">Chọn khung giờ gửi</label>
                        <select class="form-control" id="sendTime" name="sendTime">
                            ${sendTimeOptions}
                        </select>
                    </div>
                    <input type="hidden" name="action" value="send_telegram">
                    <button type="submit" class="btn btn-info">Send Telegram</button>
                </div>
                ${telegramStatus ? `<div class="alert alert-success mt-4">${telegramStatus}</div>` : ''}
            </form>
        </div>
    </body>
    </html>
  `;
}

async function sendTelegramMessage(botToken, chatId, message) {
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: new URLSearchParams({ chat_id: chatId, text: message }),
  });

  if (!response.ok) {
    throw new Error(`Telegram API error: ${response.statusText}`);
  }

  return response.json();
}
